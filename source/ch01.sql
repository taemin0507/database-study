/*
  1. 데이터베이스 시작하기
  1.1 데이터베이스란
*/
-- 1) Data-base
-- 무엇? 데이터를 체계적으로 모아 놓은 핵심 저장소
-- - 구조화된 데이터의 집합
-- - 방대한 정보를 체계적으로 저장
-- - 디지털화된 데이터 창고
-- - 빠르고 효율적인 데이터 활용 가능

-- 장점? 
-- 예: 연락처 저장 시 "내 머릿속(기억) VS 수첩(아날로그) VS 파일 시스템(디지털) VS 스마트폰(디지털)" 비교

-- 내 머릿속(기억): 사람의 기억력에는 한계가 있고 부정확함. 모든 연락처를 다 기억할 수는 없음

-- 수첩: 수첩에 연락처를 적었다? 일일이 다 적을 수는 있지만 나중에 찾기도 힘들고 중간에 값을 변경하거나 끼워 넣기도 어렵고 가나다 순으로 정리하기 힘듦
-- - 검색, 수정, 삭제 번거로움(새로 써야 할 수도)
-- - 분실 시 노답

-- 파일 시스템: 텍스트 파일에 연락처 정보를 나열할 수 있지만, 여전히 데이터 구조가 명확하지 않고, 여러 파일에 나뉘어 중복 저장되어 있는 경우 특정 데이터를 찾거나 수정하기가 어려움

-- 스마트폰(DB): 
-- - 검색, 수정, 삭제 쉬움
-- - 데이터 손상에도 복구(백업) 가능 (클라우드에 저장)

-- => 즉, 데이터를 체계적으로 저장하고, 우리가 원하는 조건으로 쉽고 빠르게 찾아내고 "가공해서 유의미한 정보"로 만들 수 있도록 도와주는 강력한 핵심 도구로 데이터베이스를 사용

-- 생활 속 DB들
-- 예: 스마트폰 연락처, 유튜브 영상, 인스타그램 사진/댓글/좋아요, 이번 달 카드 사용 내역 등
-- DB는 다양한 영역에서 아날로그적 데이터 저장 방식을 대체

-- 2) DBMS(Database Management System)
-- DBMS? DB랑 다른건가요?
-- 무엇? (DB 창고를 관리하는) 창고 관리자
-- 즉, 데이터베이스는 DBMS를 통해 관리됨
-- - DB를 관리하는 소프트웨어(프로그램)
-- - 데이터의 생성, 조회, 수정, 삭제 등의 기능 제공(CRUD)
-- - 다양한 종류가 있음(예: MySQL, Oracle, MS SQL Server 등)

-- (참고) 보통 실무에서는 데이터베이스와 DBMS를 엄밀하게 구분하지는 않고, 데이터베이스(DB)라고 통칭해서 부름

-- 특징? DBMS는 사용자에게 다양한 기능을 제공
-- 비유: 도서관(DB)에서 도서관 사서(DBMS)가 도서 대여/반납을 도와주는 느낌
-- 아래 7가지 특징(암기X)
-- - 효율성: 효율적 데이터 관리
--   - 대량의 데이터를 체계적 저장, 관리
--   - 다양하고 복잡한 조건으로도 쉽게 데이터를 검색 및 활용 가능
--   - 테이블과 관계를 통한 조직화(예: 부서-직원, 고객-주문-상품)
-- - 무결성: 데이터 무결성(integrity) 유지
--   - 일관되며 신뢰할 수 있는 데이터
--   - 이를 위한 다양한 규칙 적용(=제약 조건)
--   - 예: 상품 가격은 항상 양수, 주문 수량도 최소 1개, 회원의 아이디는 중복 불가
-- - 동시성: 동시성 제어
--   - 여러 사용자가 사용해도 괜찮음(DBMS는 모든 작업을 트랜잭션 단위로 실행)
--   - 예: 고객 2명이 동시에 주문을 완료했는데, 실제로는 재고가 1개 밖에 없는 상황(동시성 제어 문제)
--        여러 사용자가 동시에 같은 데이터에 접근해서 수정하려고 할 때 데이터의 일관성이 깨짐
-- - 보안
--   - 접근 권한에 따른 사용 제어
--   - 예: 민감한 정보를 모든 직원이 다 봐도 될까? 
--        특정 직원에게는 이름과 연락처만, 재무팀에게만 계좌 번호를 보여주도록 권한 설정
-- - 백업 및 복구
--   - 장애 발생 시 데이터를 안전하게 복구하고 백업할 수 있는 기능 제공
--   - 예: 하드디스크가 갑자기 고장 났을 때, 실수로 중요한 파일을 삭제했을 때, 백업해두지 않았다면 모든 데이터를 날림
-- - 추상성: 데이터 추상화
--   - 복잡한 데이터 저장 구조를 단순화(데이터 저장한다고 하면 내부적으로 알아서 저장함)
--   - 개발자나 사용자는 내부적으로 어떻게 저장하는지 알 필요가 없음
--   - 저장 구조를 모르더라도 쉽게 사용 가능
-- - 접근성: 쉬운 데이터 접근성
--   - SQL과 같은 표준화된 질의어 제공
--   - 질문만 던지면 원하는 데이터가 나옴

-- MySQL의 장점? MySQL로 실습하는 이유
-- - 무료 오픈소스
--   - 무료로 사용할 수 있는 커뮤니티 버전 제공
--   - 전체 코드를 공개: 필요에 따라 수정 및 확장 가능
-- - 광범위한 사용
--   - 다양한 분야에서 검증된 프로그램
--   - 웹 개발, 소프트웨어 개발, 데이터 분석 등
-- - 풍부한 문서 및 커뮤니티
--   - 잘 정리된 공식 매뉴얼
--   - 활발한 온라인 커뮤니티
-- - 표준 SQL 지원
--   - 국제 기준의 SQL을 지원
--   - 표준어를 알면 국내 여행에 무리가 없듯이 표준 SQL을 알면 기타 DBMS 학습에도 빠르게 적용 가능

-- 3) SQL(Structured Query Language)
-- 무엇? 데이터베이스와 소통을 위한 언어(한국에선 한국어, 미국에선 영어, DB에선 SQL)
-- - 표준화된 질의 언어
-- - DBMS를 통해 수행됨
-- - SQL 명령을 통해 DB속 데이터를 생성, 조회, 수정, 삭제 가능(CRUD)

-- ANSI SQL 표준
-- - RDBMS들이 공통적으로 사용할 수 있는 표준 SQL 문법을 정의
-- - Oracle, MySQL, MS SQL, PostgreSQL 등 대부분의 RDBMS는 이 표준을 준수하려고 노력
-- - 물론, 각 RDBMS는 표준 SQL 외에도 자신만의 고유한 추가 기능(함수나 문법)을 가지고 있음
-- - 하지만 데이터를 다루는 가장 핵심적인 부분인 조회(SELECT), 추가(INSERT), 수정(UPDATE), 삭제(DELETE) 등의 기본 문법은 대부분 SQL 표준을 따르기 때문에 거의 모든 RDBMS를 비슷하게 다룰 수 있음

-- SQL 명령어의 4가지 종류
-- - 데이터 정의어(Data Definition Language - DDL)
--   - 데이터의 '구조'를 정의하고 관리하는 언어. 데이터 그 자체가 아니라, 데이터를 담을 그릇(테이블)이나 창고(데이터베이스)의 설계도를 만들고, 수정하고, 제거하는 역할
--   - 예:
--     CREATE: 데이터베이스, 테이블 등의 구조를 생성
--     ALTER: 이미 만들어진 테이블의 구조를 변경
--     DROP: 데이터베이스, 테이블을 완전히 삭제
-- - 데이터 조작어(Data Manipulation Language - DML)
--   - 테이블 안에 들어있는 실제 '데이터'를 직접 조작(추가, 조회, 수정, 삭제)하는 언어. SQL에서 가장 빈번하게 사용되는 명령어들이 여기에 속함
--   - 예:
--     INSERT: 테이블에 새로운 데이터를 추가
--     SELECT: 테이블에서 데이터를 조회(검색)
--     UPDATE: 기존 데이터를 수정
--     DELETE: 기존 데이터를 삭제
-- - 데이터 제어어(Data Control Language - DCL)
--   - 데이터에 대한 접근 권한을 부여(GRANT)하거나 회수(REVOKE)하는 등, 데이터의 보안과 관련된 권한을 제어
--   - DCL을 주로 다루는 사람은 DBA(Database Administrator)
--   - 예:
--     GRANT: 특정 사용자에게 특정 작업에 대한 수행 권한을 부여
--     REVOKE: 특정 사용자에게서 이미 부여한 권한을 회수
-- - 트랜잭션 제어어(Transaction Control Language - TCL)
--   - DML에 의해 수행된 데이터 변경 작업들을 하나의 '거래(Transaction)' 단위로 묶어서 관리하는 언어. 작업의 일관성을 보장하여 데이터가 잘못되는 것을 방지
--   - 예:
--     COMMIT: 트랜잭션의 모든 작업을 최종적으로 데이터베이스에 확정, 저장
--     ROLLBACK: 트랜잭션의 모든 작업을 취소하고 이전 상태로 되돌림

-- (참고) 트랜잭션이란?
-- 하나의 작업 단위를 구성하는 일련의 데이터베이스 연산 집합
-- 이 연산들은 모두 성공하거나(Commit), 모두 실패해야 함(Rollback).
-- 예를 들어 쇼핑몰에서:
-- A 고객이 결제를 하면
-- - 재고에서 상품 수량이 줄고
-- - 주문 내역이 기록되며
-- - 포인트가 차감된다.

-- 이 세 가지는 하나의 트랜잭션

-- 예제: 은행 이체
BEGIN; -- 트랜잭션 시작
-- 또는 START TRANSACTION;

UPDATE accounts SET balance = balance - 10000 WHERE user_id = 1;  -- A 계좌 출금
UPDATE accounts SET balance = balance + 10000 WHERE user_id = 2;  -- B 계좌 입금

-- ROLLBACK; -- 트랜잭션 실패 시 되돌림

COMMIT; -- 트랜잭션을 확정, DB에 반영

-- 만약 두 번째 UPDATE에서 오류가 나면?
-- 전체 트랜잭션이 ROLLBACK(되돌리기) 되어야 함 -> 내 돈만 사라지면 안 되니까

-- 정리:
-- 트랜잭션은 데이터베이스에서 "이것들은 하나로 처리돼야 해!" 라는 작업의 최소 단위
-- 모든 연산이 전부 성공하거나, 전부 실패하도록 보장해 주는 게 목적

-- Quiz
-- 1. 다음 빈칸에 들어갈 용어는?
-- __________(이)란 구조화된 데이터의 집합으로, 일종의 데이터 창고와 같습니다.

-- 2. 다음 빈칸에 들어갈 용어는?
-- __________(이)란 데이터베이스를 관리하기 위한 프로그램으로 데이터베이스에 저장된 데이터를 생성, 조회, 수정, 삭제하는 등 다양한 방식으로 데이터를 조작할 때 활용합니다.

-- 3. 다음 빈칸에 들어갈 용어는?
-- __________(이)란 사용자와 데이터베이스가 소통하기 위한 언어로 데이터베이스에 저장된 데이터를 가져오거나 변경하기 위한 명령을 내릴 때 사용합니다.

-- 정답:


/*
  1.2 데이터 저장 형식
*/
-- 1) 데이터베이스 파일(이런 것도 있구나 정도로 간단히, 암기X)
-- DBMS는 데이터를 다양한 파일로 저장 및 관리
-- - 데이터 파일: 실제 데이터를 저장
-- - 로그 파일: 작업 내용을 저장(데이터 복구에 사용)
-- - 인덱스 파일: 빠른 검색을 위한 정보 저장(예: 책 뒤에 인덱스와 같은 개념)
-- - 설정 파일: DBMS의 구성과 운영 설정을 저장
-- - 메타데이터 파일: 데이터베이스 구조(테이블, 데이터 타입, 관계 등)에 대한 정보를 저장

-- => 암기X, 잘 몰라도 DBMS가 알아서 잘 관리하고 생성함
-- DBMS가 관리하는 내부 데이터 파일들은 사용자가 직접 열어보거나 수정하려고 해서는 안됨
-- 그렇게 할 경우 데이터가 손상되거나 DBMS 시스템 전체에 문제가 생길 수 있음
-- 모든 데이터 접근은 반드시 DBMS를 통해서 이루어져야 함

-- 2) 테이블(비유: 엑셀의 표)
-- 데이터베이스가 정보를 저장하는 기본 구조로 데이터를 테이블에 담아 저장
-- 열(column, 속성, 필드)과 행(row, 레코드, 튜플)으로 구성
-- - 열(column): 데이터의 속성(어떤 종류의 데이터인지), 예: 고객 테이블이라면 고객번호, 이름, 연락처, 주소 등
-- - 행(row): 하나의 데이터 항목, 예: 고객 테이블에서 하나의 행은 고객 한 명의 정보를 의미

-- Quiz
-- 4. 다음 burgers 테이블에 대한 설명으로 옳지 않은 것을 고르세요.
-- burgers
-- id | name                  | price  | gram  | kcal  | protein
-- --------------------------------------------------------------
-- 1    불고기 버거               5200     223     583      27
-- 2    베이컨 디럭스 버거         6200     242     545      27
-- 3    스파이시 버거             5300     235     494      20
-- 4    슈비두밥 버거             6200     269     563      21
-- 5    더블 쿼터파운드 치즈 버거   7700     275     770      50

-- ① 총 5개의 레코드가 존재한다.
-- ② 각 버거는 6개의 속성값을 가진다.
-- ③ 가장 싼 버거의 아이디(id)는 1이다.
-- ④ 슈비두밥 버거의 가격(price)은 6200이다.
-- ⑤ 가장 칼로리(kcal)가 낮은 버거 이름은(name)은 베이컨 디럭스 버거다.

-- 정답: 


/*
  1.3 MySQL 실습 환경
*/
-- MySQL 서버 & MySQL 워크벤치
-- (서버)       (클라이언트)

-- 서버: 서비스를 제공하는 프로그램(제공자)
-- 클라이언트: 서버에 요청해 결과를 응답받는 프로그램(사용자)

-- 0) MySQL 설치 확인
-- 윈도우 검색창 -> 설치된 앱 또는 프로그램 추가/제거 검색 -> MySQL 검색

-- MySQL 다운로드: https://dev.mysql.com/downloads/

-- 1) MySQL 서버 설치
-- MySQL Community Server 다운로드 -> 8.4.5 LTS 버전
-- 중요! MySQL 관리자(Root) 계정 비밀번호 설정: mysql1234 또는 test1234

-- 2) MySQL 워크벤치 설치
-- MySQL Workbench 다운로드 -> 8.0.42 버전
-- 데이터베이스에 접속을 해서 데이터베이스를 다룰 수 있는 클라이언트

-- 1), 2) 한 번에 설치하기(<-- 추천!)
-- MySQL Installer for Windows -> MySQL Installer 8.0.43

-- 3) 헬로 월드
SELECT 'hello world!';

-- 기능적으로는 소문자든 대문자든 차이가 없고, 전적으로 가독성과 팀의 코딩 스타일 가이드에 따라 달라짐
-- 관례적으로는 SQL 키워드는 대문자로 씀

-- Quiz
-- 5. 다음 빈칸에 들어갈 용어는?
-- __________(이)란 특정 서비스를 제공하는 프로그램(또는 컴퓨터)을 뜻합니다.
-- 여기서는 MySQL 서버가 이에 해당합니다.

-- 6. 다음 빈칸에 들어갈 용어는?
-- __________(이)란 서버가 제공하는 기능을 사용하는 프로그램(또는 컴퓨터)을 뜻합니다.
-- 여기서는 MySQL 워크벤치가 이에 해당합니다.

-- 정답: 


-- (참고) RDBMS VS NoSQL
-- 관계형 데이터베이스 관리 시스템(RDBMS)
-- - 현재 가장 널리 사용되는 데이터베이스 시스템
-- - 테이블 간의 관계를 기반으로 데이터를 구조화
-- - 예: 고객 테이블(PK: 고객 아이디) - 주문 테이블(FK: 고객 아이디)

-- NoSQL(Not Only SQL) 데이터베이스 관리 시스템
-- - NoSQL은 "Not Only SQL"의 줄임말
-- - 빅데이터와 특정 요구사항에 맞춰 최근 등장한 시스템
-- - 예: 엄청나게 많은 비정형 데이터 처리, 매우 빠른 읽기/쓰기 속도, 유연한 데이터 모델 등
-- - 관계형 데이터베이스의 한계를 보완